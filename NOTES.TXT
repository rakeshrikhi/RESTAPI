HighLevelDesign- 
The UML Class diagram of the package is available in png file at top folder. https://github.com/rakeshrikhi/RESTAPI/blob/main/RESTAPI.umlcd.png
The coding statergy used is Prototyping model i.e. making a runnable code asap, tuning it and then making the design extensible. At the core code uses Java ExectorService (with configurable number of concurrent clients) to collect the performance metrices. Git checkins are provided as the solution statergy evoloved. First, getting the http client work. then, looking for perf enchancements of the core logic. Lastly, making the code extensible so that more APIs could be coded.

UnitTesting- 
Junit Tests cases are available in test package. Cases are testing for performance threasholds. These can be invoked through a CI package to asset the health of the APIs.

Performance Parameters-
MAX_NUM_CONCURRENT_CLIENTS = 4;
MAX_RUN_TIME_MINUTES = 1;
WAIT_TIME_BETWEEN_REQUESTS_MS = 1000;//millisec
permissible AvgRequestExecTime PerClient=200;//milliseconds
permissible SuccessfulResponses Percent=90;//percentage

Next Steps/Enhancements- 
Error array needs to be analyzed further. Status code is still 200 for wrong API strings.
Getting familiar with Karken APIs. 
Putting constant variables in the property files. 
Storing the metrics in files/db, so that historical analysis could be performed.